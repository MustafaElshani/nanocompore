{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Nanocompore documentation Nanocompore identifies differences in ONT nanopore sequencing raw signal corresponding to RNA modifications by comparing 2 samples Nanocompore compares 2 ONT nanopore direct RNA sequencing datasets from different experimental conditions expected to have a significant impact on RNA modifications. It is recommended to have at least 2 replicates per condition. For example one can use a control condition with a significantly reduced number of modifications such as a cell line for which a modification writing enzyme was knocked-down or knocked-out. Alternatively, on a smaller scale transcripts of interests could be synthesized in-vitro.","title":"Home"},{"location":"#welcome-to-nanocompore-documentation","text":"Nanocompore identifies differences in ONT nanopore sequencing raw signal corresponding to RNA modifications by comparing 2 samples Nanocompore compares 2 ONT nanopore direct RNA sequencing datasets from different experimental conditions expected to have a significant impact on RNA modifications. It is recommended to have at least 2 replicates per condition. For example one can use a control condition with a significantly reduced number of modifications such as a cell line for which a modification writing enzyme was knocked-down or knocked-out. Alternatively, on a smaller scale transcripts of interests could be synthesized in-vitro.","title":"Welcome to Nanocompore documentation"},{"location":"alternative/","text":"Alternative and complementary packages Here is a non-exhaustive list of alternative/complementary packages that could also be used to analyse RNA methylation from nanopore sequencing datasets: Tombo ...","title":"Alternative and complementary packages"},{"location":"alternative/#alternative-and-complementary-packages","text":"Here is a non-exhaustive list of alternative/complementary packages that could also be used to analyse RNA methylation from nanopore sequencing datasets: Tombo ...","title":"Alternative and complementary packages"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at aleg@ebi.ac.uk . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at aleg@ebi.ac.uk . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing to nanocompore First of all, thanks for considering contributing to nanocompore ! \ud83d\udc4d It's people like you that make it rewarding for us to work on nanocompore . nanocompore is an open source project, maintained by publicly funded academic researchers. Code of conduct Please note that this project is released with a [Contributor Code of Conduct][code_of_conduct.md]. By participating in this project you agree to abide by its terms. How you can contribute There are several ways you can contribute to this project. If you want to know more about why and how to contribute to open source projects like this one, see this Open Source Guide . Share the love \u2764\ufe0f Think nanocompore is useful? Let others discover it, by telling them in person, via Twitter or a blog post. Using nanocompore for a paper you are writing? Please cite it. Ask a question \u2049\ufe0f Using nanocompore and got stuck? Browse the documentation to see if you can find a solution. Still stuck? Post your question as an issue on GitHub . While we cannot offer user support, we'll try to do our best to address it, as questions often lead to better documentation or the discovery of bugs. Propose an idea \ud83d\udca1 Have an idea for a new nanocompore feature? Take a look at the issue list to see if it isn't included or suggested yet. If not, suggest your idea as an issue on GitHub . While we can't promise to implement your idea, it helps to: Explain in detail how it would work. Keep the scope as narrow as possible. See below if you want to contribute code for your idea as well. Report a bug \ud83d\udc1b Using nanocompore and discovered a bug? That's annoying! Don't let others have the same experience and report it as an issue on GitHub so we can fix it. A good bug report makes it easier for us to do so, so please include: Your operating system name and version (e.g. Mac OS 10.13.6). Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Improve the documentation \ud83d\udcd6 Noticed a typo on the website? Think a function could use a better example? Good documentation makes all the difference, so your help to improve it is very welcome! Fork nanocompore and clone it to your computer. To learn more about this process, see this guide . Edit the README.md file and submit a pull request. We will review your changes and include the fix in the next release. Contribute code \ud83d\udcdd Care to fix bugs or implement new functionality for nanocompore ? Awesome! \ud83d\udc4f Have a look at the issue list and leave a comment on the things you want to work on. See also the development guidelines below. Development guidelines We try to follow the GitHub flow for development and the PEP 8 style Guide for Python Code. Fork nanocompore and clone it to your computer. To learn more about this process, see this guide . If you have forked and cloned the project before and it has been a while since you worked on it, pull changes from the original repo to your clone by using git pull upstream master . Make your changes and test the modified code. Commit and push your changes. Submit a pull request . This file was adapted from a template created by peterdesmet .","title":"Contributing"},{"location":"contributing/#contributing-to-nanocompore","text":"First of all, thanks for considering contributing to nanocompore ! \ud83d\udc4d It's people like you that make it rewarding for us to work on nanocompore . nanocompore is an open source project, maintained by publicly funded academic researchers.","title":"Contributing to nanocompore"},{"location":"contributing/#code-of-conduct","text":"Please note that this project is released with a [Contributor Code of Conduct][code_of_conduct.md]. By participating in this project you agree to abide by its terms.","title":"Code of conduct"},{"location":"contributing/#how-you-can-contribute","text":"There are several ways you can contribute to this project. If you want to know more about why and how to contribute to open source projects like this one, see this Open Source Guide .","title":"How you can contribute"},{"location":"contributing/#share-the-love","text":"Think nanocompore is useful? Let others discover it, by telling them in person, via Twitter or a blog post. Using nanocompore for a paper you are writing? Please cite it.","title":"Share the love \u2764\ufe0f"},{"location":"contributing/#ask-a-question","text":"Using nanocompore and got stuck? Browse the documentation to see if you can find a solution. Still stuck? Post your question as an issue on GitHub . While we cannot offer user support, we'll try to do our best to address it, as questions often lead to better documentation or the discovery of bugs.","title":"Ask a question \u2049\ufe0f"},{"location":"contributing/#propose-an-idea","text":"Have an idea for a new nanocompore feature? Take a look at the issue list to see if it isn't included or suggested yet. If not, suggest your idea as an issue on GitHub . While we can't promise to implement your idea, it helps to: Explain in detail how it would work. Keep the scope as narrow as possible. See below if you want to contribute code for your idea as well.","title":"Propose an idea \ud83d\udca1"},{"location":"contributing/#report-a-bug","text":"Using nanocompore and discovered a bug? That's annoying! Don't let others have the same experience and report it as an issue on GitHub so we can fix it. A good bug report makes it easier for us to do so, so please include: Your operating system name and version (e.g. Mac OS 10.13.6). Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report a bug \ud83d\udc1b"},{"location":"contributing/#improve-the-documentation","text":"Noticed a typo on the website? Think a function could use a better example? Good documentation makes all the difference, so your help to improve it is very welcome! Fork nanocompore and clone it to your computer. To learn more about this process, see this guide . Edit the README.md file and submit a pull request. We will review your changes and include the fix in the next release.","title":"Improve the documentation \ud83d\udcd6"},{"location":"contributing/#contribute-code","text":"Care to fix bugs or implement new functionality for nanocompore ? Awesome! \ud83d\udc4f Have a look at the issue list and leave a comment on the things you want to work on. See also the development guidelines below.","title":"Contribute code \ud83d\udcdd"},{"location":"contributing/#development-guidelines","text":"We try to follow the GitHub flow for development and the PEP 8 style Guide for Python Code. Fork nanocompore and clone it to your computer. To learn more about this process, see this guide . If you have forked and cloned the project before and it has been a while since you worked on it, pull changes from the original repo to your clone by using git pull upstream master . Make your changes and test the modified code. Commit and push your changes. Submit a pull request . This file was adapted from a template created by peterdesmet .","title":"Development guidelines"},{"location":"data_preparation/","text":"Data preparation Before using nanocompore, sequencing data have to be basecalled (Albacore or Guppy), aligned on a transcriptome reference and resquiggled with Nanopolish. To simplify the data preprocessing we wrote a Nextflow pipeline which automatises all these steps as well as extra quality control steps: https://github.com/tleonardi/nanocompore_pipeline Reads basecalling Firstly, raw fast5 reads have to be basecalled with a recent version of ONT basecaller. Basecalled fast5 files are not required for the rest of the analysis, only the raw fast5 and the basecalled fastq. Example with Guppy v2.3.5 guppy_basecaller -i { raw_fast5_dir } -s { dest_dir } --flowcell { flowcell_id } --kit { Kit_id } -r --calib_detect --enable_trimming true --trim_strategy rna --reverse_sequence true Then the output fastq files should be concatenated in a single one. cat { dir_to guppy output } /*.fastq > { basecalled_fastq } Transcriptome alignment Basecalled reads have to be aligned to a reference. For dRNA-Seq, reads should be aligned to a reference transcriptome (not genome) in a non-spliced fashion. For example, one can download reference transcriptome fasta files directly from Gencode for human and mouse . Bam files have to be filtered to remove any reads that would be unmapped, secondary and supplementary as well as reads mapped on the reverse strand (SAM flag 2324). We also recommend to discard reads with a very low alignment score (MAPQ<10). Finally, reads have then to be sorted and indexed. Example with Minimap2 v2.16 minimap2 -ax map-ont -L { transcriptome_fasta } { basecalled_fastq } | samtools view -bh -F 2324 -q 10 | samtools sort -O bam > { aligned_reads_bam } samtools index { aligned_reads_bam } Read indexing and resquiggling with Nanopolish is required to realign raw signal to the expected reference sequence. Reads have to be indexed first with nanopolish index, realigned with nanopolish eventalign and finally the data has to be collapsed per kmer and indexed by NanopolishComp Eventalign_collapse. Example with Nanopolish v0.10.1 and NanopolishComp v0.4.3 nanopolish index -s { sequencing_summary.txt } -d { raw_fast5_dir } { basecalled_fastq } nanopolish eventalign --reads { basecalled_fastq } --bam { aligned_reads_bam } --genome { transcriptome_fasta } --samples --print-read-names --scale-events --samples > { eventalign_reads_tsv } NanopolishComp Eventalign_collapse -i { eventalign_reads_tsv } -o { eventalign_collapsed_reads_tsv }","title":"Data preparation"},{"location":"data_preparation/#data-preparation","text":"Before using nanocompore, sequencing data have to be basecalled (Albacore or Guppy), aligned on a transcriptome reference and resquiggled with Nanopolish. To simplify the data preprocessing we wrote a Nextflow pipeline which automatises all these steps as well as extra quality control steps: https://github.com/tleonardi/nanocompore_pipeline","title":"Data preparation"},{"location":"data_preparation/#reads-basecalling","text":"Firstly, raw fast5 reads have to be basecalled with a recent version of ONT basecaller. Basecalled fast5 files are not required for the rest of the analysis, only the raw fast5 and the basecalled fastq. Example with Guppy v2.3.5 guppy_basecaller -i { raw_fast5_dir } -s { dest_dir } --flowcell { flowcell_id } --kit { Kit_id } -r --calib_detect --enable_trimming true --trim_strategy rna --reverse_sequence true Then the output fastq files should be concatenated in a single one. cat { dir_to guppy output } /*.fastq > { basecalled_fastq }","title":"Reads basecalling"},{"location":"data_preparation/#transcriptome-alignment","text":"Basecalled reads have to be aligned to a reference. For dRNA-Seq, reads should be aligned to a reference transcriptome (not genome) in a non-spliced fashion. For example, one can download reference transcriptome fasta files directly from Gencode for human and mouse . Bam files have to be filtered to remove any reads that would be unmapped, secondary and supplementary as well as reads mapped on the reverse strand (SAM flag 2324). We also recommend to discard reads with a very low alignment score (MAPQ<10). Finally, reads have then to be sorted and indexed. Example with Minimap2 v2.16 minimap2 -ax map-ont -L { transcriptome_fasta } { basecalled_fastq } | samtools view -bh -F 2324 -q 10 | samtools sort -O bam > { aligned_reads_bam } samtools index { aligned_reads_bam }","title":"Transcriptome alignment"},{"location":"data_preparation/#read-indexing-and-resquiggling-with","text":"Nanopolish is required to realign raw signal to the expected reference sequence. Reads have to be indexed first with nanopolish index, realigned with nanopolish eventalign and finally the data has to be collapsed per kmer and indexed by NanopolishComp Eventalign_collapse. Example with Nanopolish v0.10.1 and NanopolishComp v0.4.3 nanopolish index -s { sequencing_summary.txt } -d { raw_fast5_dir } { basecalled_fastq } nanopolish eventalign --reads { basecalled_fastq } --bam { aligned_reads_bam } --genome { transcriptome_fasta } --samples --print-read-names --scale-events --samples > { eventalign_reads_tsv } NanopolishComp Eventalign_collapse -i { eventalign_reads_tsv } -o { eventalign_collapsed_reads_tsv }","title":"Read indexing and resquiggling with"},{"location":"installation/","text":"Installation Create a clean virtual environment Ideally, before installation, create a clean python3.5+ virtual environment to deploy the package. Python 2 is not supported . For example one can use conda or virtualenvwrapper. With virtualenvwrapper : mkvirtualenv nanocompore -p python3.6 With conda : conda create -n nanocompore python = 3 .6 Dependencies Nanocompore relies on a the following robustly maintained third party python libraries: numpy >= 1.14.0 scipy >= 1.1.0 tqdm >= 4.23.4 pyfaidx >= 0.5.4.1 matplotlib >= 2.2.2 seaborn >= 0.9.0 pandas >= 0.23.3 statsmodels >= 0.9.0 scikit-learn >= 0.20 bedparse >= 0.1.2 The correct versions of packages are installed together with the software when using pip. Option 1: Direct installation with pip from github (recommended) To install the package with an ssh key pip3 install git+ssh://git@github.com/tleonardi/nanocompore.git To install the package with https/ssh pip3 install git+https://github.com/tleonardi/nanocompore.git Option 2: Clone the repository and install locally in develop mode With this option, the package will be locally installed in \u201ceditable\u201d or \u201cdevelop\u201d mode. This allows the package to be both installed and editable in project form. This is the recommended option if you wish to modify the code and/or participate to the development of the package (see contribution guidelines ). # Clone repo localy git clone https://github.com/tleonardi/nanocompore.git # Enter in repo directory cd nanocompore # Make setup.py executable chmod u+x setup.py # Install with pip3 pip3 install -e ./","title":"Installation instructions"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#create-a-clean-virtual-environment","text":"Ideally, before installation, create a clean python3.5+ virtual environment to deploy the package. Python 2 is not supported . For example one can use conda or virtualenvwrapper. With virtualenvwrapper : mkvirtualenv nanocompore -p python3.6 With conda : conda create -n nanocompore python = 3 .6","title":"Create a clean virtual environment"},{"location":"installation/#dependencies","text":"Nanocompore relies on a the following robustly maintained third party python libraries: numpy >= 1.14.0 scipy >= 1.1.0 tqdm >= 4.23.4 pyfaidx >= 0.5.4.1 matplotlib >= 2.2.2 seaborn >= 0.9.0 pandas >= 0.23.3 statsmodels >= 0.9.0 scikit-learn >= 0.20 bedparse >= 0.1.2 The correct versions of packages are installed together with the software when using pip.","title":"Dependencies"},{"location":"installation/#option-1-direct-installation-with-pip-from-github-recommended","text":"To install the package with an ssh key pip3 install git+ssh://git@github.com/tleonardi/nanocompore.git To install the package with https/ssh pip3 install git+https://github.com/tleonardi/nanocompore.git","title":"Option 1: Direct installation with pip from github (recommended)"},{"location":"installation/#option-2-clone-the-repository-and-install-locally-in-develop-mode","text":"With this option, the package will be locally installed in \u201ceditable\u201d or \u201cdevelop\u201d mode. This allows the package to be both installed and editable in project form. This is the recommended option if you wish to modify the code and/or participate to the development of the package (see contribution guidelines ). # Clone repo localy git clone https://github.com/tleonardi/nanocompore.git # Enter in repo directory cd nanocompore # Make setup.py executable chmod u+x setup.py # Install with pip3 pip3 install -e ./","title":"Option 2: Clone the repository and install locally in develop mode"},{"location":"licence/","text":"MIT License Copyright \u00a9 2018 Tommasso Leonardi and Adrien Leger Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"licence/#mit-license","text":"Copyright \u00a9 2018 Tommasso Leonardi and Adrien Leger Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"usage/","text":"Usage Command line usage","title":"Nanocompore Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#command-line-usage","text":"","title":"Command line usage"}]}